<snippet>
  <content><![CDATA[/**
 * Script file of ${1:Project} ${2:Component}
 *
 * @package     Joomla.Administrator
 * @subpackage  ${3:com}_${4}${1/(.+)/\L\1/g}
 *
 * @since       ${5:0.0.1}
 */
class ${3/(.+)/\u\1/g}_${4/(.+)[_]/\u\1/g}${1/(.+)/\u\1/g}InstallerScript
{
  /**
   * Extension name
   *
   * @var   string
   * @since $5
   */
  private \$_extension = '${3/(.+)/\L\1/g}_${4/(.+)/\L\1/g}${1/(.+)/\L\1/g}';

  /**
   * Version release
   *
   * @var   string
   * @since $5
   */
  private \$_release = '';

  /**
   * Array of sub extensions package
   *
   * @var   array
   * @since $5
   */
  private \$_subextensions = array(
    'modules' => array(
    ),
    'plugins' => array(
    )
  );

  /**
   * Array of obsolete files and folders.
   * Examples:
   *    /path/to/file.ext
   *    /path/to/folder
   *
   * @var   array
   * @since $5
   */
  private \$_obsoletes = array(
    'files' => array(
    ),
    'folders' => array(
    )
  );

  /**
   * Method to install the ${2/(.+)/\L\1/g}
   *
   * @param  JAdapterInstance  \$adapter  The object responsible for running this script.
   *
   * @return boolean           True on success.
   *
   * @since  ${5}
   */
  function install(\$adapter)
  {
    ${6:echo '<p>' . JText::sprintf('${3/(.+)/\U\1/g}_${4/(.+)/\U\1/g}${1/(.+)/\U\1/g}_INSTALL_TEXT', \$this->_release) . '</p>';}
  }

  /**
   * Method to uninstall the ${2/(.+)/\L\1/g}
   *
   * @param  JAdapterInstance  \$adapter  The object responsible for running this script.
   *
   * @return boolean           True on success.
   *
   * @since  ${5}
   */
  function uninstall(JAdapterInstance \$adapter)
  {
    ${7:echo '<p>' . JText::sprintf('${3/(.+)/\U\1/g}_${4/(.+)/\U\1/g}${1/(.+)/\U\1/g}_UNINSTALL_TEXT', \$this->_release) . '</p>';}
  }

  /**
   * Method to update the ${2/(.+)/\L\1/g}
   *
   * @param  JAdapterInstaller \$adapter
   *
   * @return boolean           True on success.
   *
   * @since  ${5}
   */
  function update(\$adapter)
  {
    ${8:echo '<p>' . JText::sprintf('${3/(.+)/\U\1/g}_${4/(.+)/\U\1/g}${1/(.+)/\U\1/g}_UPDATE_TEXT', \$this->_release) . '</p>';}
  }

  /**
   * Method to run before an install/update/uninstall method
   *
   * @param  string            \$route    Which action is happening (install|uninstall|discover_install).
   * @param  JAdapterInstance  \$adapter  The object responsible for running this script.
   *
   * @return boolean           True on success.
   *
   * @since  ${5}
   */
  function preflight(\$route, \$adapter)
  {
    \$this->_checkCompatible(\$route, \$adapter);$9
  }

  /**
   * Method to run after an install/update/uninstall method
   *
   * @param  string            \$route    Which action is happening (install|uninstall|discover_install).
   * @param  JAdapterInstance  \$adapter  The object responsible for running this script.
   *
   * @return boolean  True on success.
   *
   * @since  ${5}
   */
  function postflight(\$route, \$adapter)
  {
    \$this->_removeObsoletes();$10
  }

  /**
   * Method for checking compatibility installation environment
   *
   * @param  JAdapterInstance  \$adapter  The object responsible for running this script.
   *
   * @return boolean           True if the installation environment is compatible
   *
   * @since  ${5}
   */
  private function _checkCompatible(\$route, \$adapter)
  {
    // Get the application.
    \$this->_release = (string) \$adapter->get('manifest')->version;
    \$min_version    = (string) \$adapter->get('manifest')->attributes()->version;
    \$jversion       = new JVersion;

    if (version_compare(\$jversion->getShortVersion(), \$min_version, 'lt' ))
    {
      echo JText::sprintf('${3/(.+)/\U\1/g}_${4/(.+)/\U\1/g}${1/(.+)/\U\1/g}_VERSION_UNSUPPORTED', \$this->_release, \$min_version);
      return false;
    }

    // Storing old release number for process in postflight.
    if (\$route == 'update')
    {
      \$oldRelease = \$this->_getParam('version');

      if (version_compare(\$this->_release, \$oldRelease, 'le'))
      {
        echo JText::sprintf('${3/(.+)/\U\1/g}_${4/(.+)/\U\1/g}${1/(.+)/\U\1/g}_UPDATE_UNSUPPORTED', \$this->oldRelease, \$this->_release);
        return false;
      }
    }
  }

  /**
   * Removes obsoletes files and folders
   *
   * @param  array \$obsoletes Array with obsolete files and folders
   *
   * @return void
   *
   * @since  ${5}
   */
  private function _removeObsoletes(\$obsoletes = array())
  {
    jimport('joomla.filesystem.file');
    foreach(\$obsoletes['files'] as \$file)
    {
      if(JFile::exists(JPATH_ROOT . \$file) && !JFile::delete(JPATH_ROOT . \$file))
      {
        echo JText::sprintf('FILES_JOOMLA_ERROR_FILE_FOLDER', \$file) . '<br />';
      }
    }

    jimport('joomla.filesystem.folder');
    foreach(\$obsoletes['folders'] as \$folder)
    {
      if(!JFolder::exists(JPATH_ROOT . \$folder) && !JFolder::delete(JPATH_ROOT . \$folder))
      {
        echo JText::sprintf('FILES_JOOMLA_ERROR_FILE_FOLDER', \$folder) . '<br />';
      }
    }
  }

  /**
   * Get a variable from the manifest cache.
   *
   * @param  string \$name Column name
   *
   * @return string Value of column name
   *
   * @since  ${5}
   */
  private function _getParam(\$name)
  {
    \$db    = JFactory::getDbo();
    \$query = \$db->getQuery(true);

    \$query->select(\$db->quoteName('manifest_cache'));
    \$query->from(\$db->quoteName('#__extensions'));
    \$query->where(\$db->quoteName('name') . ' = ' . \$db->quote(\$this->_extension));
    \$db->setQuery(\$query);

    \$manifest = json_decode(\$db->loadResult(), true);

    return \$manifest[\$name];
  }
}]]></content>
  <tabTrigger>joomla-installer-script</tabTrigger>
  <scope>text.plain, text.php, source.php</scope>
</snippet>