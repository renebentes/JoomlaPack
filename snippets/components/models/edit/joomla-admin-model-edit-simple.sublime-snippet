<snippet>
  <content><![CDATA[use Joomla\Registry\Registry;

JLoader::register('${1:Project}Helper', JPATH_ADMINISTRATOR . '/components/com_${1/(.+)/\L\1/g}/helpers/${1/(.+)/\L\1/g}.php');

/**
 * Item Model for an ${2:${TM_FILENAME/(.*?)(\..+)/\u$1/}}.
 *
 * @package     Joomla.Administrator
 * @subpackage  Components.${1/(.+)/\u\1/g}
 * @since       ${3:0.1.0}
 */
class ${1/(.+)/\u\1/g}Model${2/(.+)/\u\1/g} extends JModelAdmin
{
  /**
   * The prefix to use with controller messages.
   *
   * @var    string
   * @since  $3
   */
  protected \$text_prefix = 'COM_${1/(.+)/\U\1/g}';

  /**
   * The type alias for this content type.
   *
   * @var    string
   * @since  $3
   */
  public \$typeAlias = 'com_${1/(.+)/\L\1/g}.${2/(.+)/\L\1/g}';

  /**
   * The context used for the associations table
   *
   * @var    string
   * @since  $3
   */
  protected \$associationsContext = 'com_${1/(.+)/\L\1/g}.item';

  /**
   * Batch copy items to a new category or current.
   *
   * @param   integer  \$value     The new category.
   * @param   array    \$pks       An array of row IDs.
   * @param   array    \$contexts  An array of item contexts.
   *
   * @return  mixed               An array of new IDs on success, boolean false on failure.
   *
   * @since   $3
   */
  protected function batchCopy(\$value, \$pks, \$contexts)
  {
    // Initialiase variables.
    \$newIds = array();

    // Parent exists so we let's proceed.
    while (!empty(\$pks))
    {
      // Pop the first ID off the stack.
      \$pk = array_shift(\$pks);

      \$this->table->reset();

      // Check that the row actually exists.
      if (!\$this->table->load(\$pk))
      {
        if (\$error = \$this->table->getError())
        {
          // Fatal error.
          \$this->setError(\$error);

          return false;
        }
        else
        {
          // Not fatal error.
          \$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', \$pk));
          continue;
        }
      }

      // Alter the ${4:title} & alias.
      \$data = \$this->generateNewTitle(0, \$this->table->alias, \$this->table->${4/(.+)/\L\1/g});
      \$this->table->${4/(.+)/\L\1/g} = \$data['0'];
      \$this->table->alias = \$data['1'];

      // Reset the ID because we are making a copy.
      \$this->table->id = 0;

      // Reset hits because we are making a copy
      \$this->table->hits = 0;

      // Unpublish because we are making a copy
      \$this->table->state = 0;

      // Check the row.
      if (!\$this->table->check())
      {
        \$this->setError(\$table->getError());
        return false;
      }

      parent::createTagsHelper(\$this->tagsObserver, \$this->type, \$pk, \$this->typeAlias, \$this->table);

      // Store the row.
      if (!\$this->table->store())
      {
        \$this->setError(\$table->getError());
        return false;
      }

      // Get the new item ID.
      \$newId = \$this->table->get('id');

      // Add the new ID to the array.
      \$newIds[\$pk] = \$newId;
    }

    // Clean the cache.
    \$this->cleanCache();

    return \$newIds;
  }

  /**
   * Method to test whether a record can be deleted.
   *
   * @param   object   \$record  A record object.
   *
   * @return  boolean           True if allowed to delete the record.
   *                            Defaults to the permission set in the component.
   *
   * @since   $3
   */
  protected function canDelete(\$record)
  {
    if (!empty(\$record->id))
    {
      if (\$record->state != -2)
      {
        return false;
      }

      // Get the current user object.
      \$user = JFactory::getUser();

      return \$user->authorise('core.delete', 'com_${1/(.+)/\L\1/g}.${2/(.+)/\L\1/g}.' . (int) \$record->id);
    }

    return false;
  }

  /**
   * Method to test whether a record can have its state edited.
   *
   * @param   object   \$record  A record object.
   *
   * @return  boolean           True if allowed to change the state of the record.
   *                            Defaults to the permission set in the component.
   *
   * @since   $3
   */
  protected function canEditState(\$record)
  {
    // Get the current user object.
    \$user = JFactory::getUser();

    // Check for existing ${2/(.+)/\L\1/g}.
    if (!empty(\$record->id))
    {
      return \$user->authorise('core.edit.state', 'com_${1/(.+)/\L\1/g}.${2/(.+)/\L\1/g}.' . (int) \$record->id);
    }
    // Default to component settings if neither ${2/(.+)/\L\1/g} nor category known.
    else
    {
      return parent::canEditState('com_${1/(.+)/\L\1/g}');
    }
  }

  /**
   * Prepare and sanitise the table data prior to saving.
   *
   * @param   JTable  \$table  A reference to a JTable object.
   *
   * @return  void
   *
   * @since   $3
   */
  protected function prepareTable(\$table)
  {
    // Set the publish date to now.
    \$db = \$this->getDbo();

    if (\$table->state == 1 && (int) \$table->publish_up == 0)
    {
      \$table->publish_up = JFactory::getDate()->toSql();
    }

    if (\$table->state == 1 && intval(\$table->publish_down) == 0)
    {
      \$table->publish_down = \$db->getNullDate();
    }

    // Increment the ${4/(.+)/\L\1/g} version number.
    \$table->version++;

    // Reorder the ${4:plural} so the new ${2/(.+)/\L\1/g} is first.
    if (empty(\$table->id))
    {
      \$table->reorder('state >= 0');
    }
  }

  /**
   * Returns a Table object, always creating it.
   *
   * @param   string  \$type    The table type to instantiate.
   * @param   string  \$prefix  A prefix for the table class name. Optional.
   * @param   array   \$config  Configuration array for model. Optional.
   *
   * @return  JTable           A database object.
   *
   * @since   $3
   */
  public function getTable(\$type = '${2/(.+)/\u\1/g}', \$prefix = '${1/(.+)/\u\1/g}Table', \$config = array())
  {
    return JTable::getInstance(\$type, \$prefix, \$config);
  }

  /**
   * Method to get a single record.
   *
   * @param   integer  \$pk  The id of the primary key.
   *
   * @return  mixed         Object on success, false on failure.
   *
   * @since   $3
   */
  public function getItem(\$pk = null)
  {
    if (\$item = parent::getItem(\$pk))
    {
      // Convert the metadata field to an array.
      \$registry = new JRegistry;
      \$registry->loadString(\$item->metadata);
      \$item->metadata = \$registry->toArray();

      // Convert the images field to an array.
      \$registry = new JRegistry;
      \$registry->loadString(\$item->images);
      \$item->images = \$registry->toArray();

      if (!empty(\$item->id))
      {
        \$item->tags = new JHelperTags;
        \$item->tags->getTagIds(\$item->id, 'com_${1/(.+)/\L\1/g}.${2/(.+)/\L\1/g}');
      }
    }

    // Load associated ${5/(.+)/\L\1/g} items.
    \$app   = JFactory::getApplication();
    \$assoc = JLanguageAssociations::isEnabled();
    if (\$assoc)
    {
      \$item->associations = array();

      if (\$item->id != null)
      {
        \$associations = JLanguageAssociations::getAssociations('com_${1/(.+)/\L\1/g}', '#__${1/(.+)/\L\1/g}${6/(.+)/\L\1/g}', 'com_${1/(.+)/\L\1/g}.item', \$item->id);

        foreach (\$associations as \$tag => \$association)
        {
          \$item->associations[\$tag] = \$association->id;
        }
      }
    }

    return \$item;
  }

  /**
   * Method to get the record form.
   *
   * @param   array    \$data      Data for the form.
   * @param   boolean  \$loadData  True if the form is to load its own data (default case), false if not.
   *
   * @return  mixed               A JForm object on success, false on failure.
   *
   * @since   $3
   */
  public function getForm(\$data = array(), \$loadData = true)
  {
    // Get the form.
    \$form = \$this->loadForm('com_${1/(.+)/\L\1/g}.${2/(.+)/\L\1/g}', '${2/(.+)/\L\1/g}', array('control' => 'jform', 'load_data' => \$loadData));

    if (empty(\$form))
    {
      return false;
    }

    \$jinput = JFactory::getApplication()->input;

    // The front end calls this model and uses ${1/(.)(.+)/\L\1/g}_id to avoid id clashes so we need to check for that first.
    if (\$jinput->get('${1/(.)(.+)/\L\1/g}_id'))
    {
      \$id = \$jinput->get('${1/(.)(.+)/\L\1/g}_id', 0);
    }
    // The back end uses id so we use that the rest of the time and set it to 0 by default.
    else
    {
      \$id = \$jinput->get('id', 0);
    }

    // Determine correct permissions to check.
    if (\$this->getState('${2/(.+)/\L\1/g}.id'))
    {
      \$id = \$this->getState('${2/(.+)/\L\1/g}.id');
    }

    // Get the current user object.
    \$user = JFactory::getUser();

    // Check for existing ${2/(.+)/\L\1/g}.
    // Modify the form based on Edit State access controls.
    if (\$id != 0 && (!\$user->authorise('core.edit.state', 'com_${1/(.+)/\L\1/g}.${2/(.+)/\L\1/g}.' . (int) \$id))
      || (\$id == 0 && !\$user->authorise('core.edit.state', 'com_${1/(.+)/\L\1/g}')))
    {
      // Disable fields for display.
      \$form->setFieldAttribute('featured', 'disabled', 'true');
      \$form->setFieldAttribute('ordering', 'disabled', 'true');
      \$form->setFieldAttribute('publish_up', 'disabled', 'true');
      \$form->setFieldAttribute('publish_down', 'disabled', 'true');
      \$form->setFieldAttribute('state', 'disabled', 'true');

      // Disable fields while saving.
      // The controller has already verified this is an ${2/(.+)/\L\1/g} you can edit.
      \$form->setFieldAttribute('featured', 'filter', 'unset');
      \$form->setFieldAttribute('ordering', 'filter', 'unset');
      \$form->setFieldAttribute('publish_up', 'filter', 'unset');
      \$form->setFieldAttribute('publish_down', 'filter', 'unset');
      \$form->setFieldAttribute('state', 'filter', 'unset');
    }

    // Prevent messing with ${2/(.+)/\L\1/g} language and category when editing existing ${2/(.+)/\L\1/g} with associations.
    \$app   = JFactory::getApplication();
    \$assoc = JLanguageAssociations::isEnabled();

    // Check if ${2/(.+)/\L\1/g} is associated
    if (\$this->getState('${2/(.+)/\L\1/g}.id') && \$app->isSite() && \$assoc)
    {
      \$associations = JLanguageAssociations::getAssociations('com_${1/(.+)/\L\1/g}', '#__${1/(.+)/\L\1/g}$6', 'com_${1/(.+)/\L\1/g}.item', \$id);

      // Make fields read only
      if (\$associations)
      {
        \$form->setFieldAttribute('language', 'readonly', 'true');
        \$form->setFieldAttribute('language', 'filter', 'unset');
      }
    }

    return \$form;
  }

  /**
   * Method to get the data that should be injected in the form.
   *
   * @return  mixed  The data for the form.
   *
   * @since   $3
   */
  protected function loadFormData()
  {
    // Check the session for previously entered form data.
    \$app  = JFactory::getApplication();
    \$data = \$app->getUserState('com_${1/(.+)/\L\1/g}.edit.${2/(.+)/\L\1/g}.data', array());

    if (empty(\$data))
    {
      \$data = \$this->getItem();

      // Prime some default values.
      if (\$this->getState('${2/(.+)/\L\1/g}.id') == 0)
      {
        \$filters     = (array) \$app->getUserState('com_${1/(.+)/\L\1/g}.${5/(.+)/\L\1/g}.filter');
        \$data->set('state', \$app->input->getInt('state', ((isset(\$filters['state']) && \$filters['state'] !== '') ? \$filters['state'] : null)));
        \$data->set('language', \$app->input->getString('language', (!empty(\$filters['language']) ? \$filters['language'] : null)));
        \$data->set('access', \$app->input->getInt('access', (!empty(\$filters['access']) ? \$filters['access'] : JFactory::getConfig()->get('access'))));
      }
    }

    // If there are params fieldsets in the form it will fail with a registry object
    if (isset(\$data->params) && \$data->params instanceof Registry)
    {
      \$data->params = \$data->params->toArray();
    }

    \$this->preprocessData('com_${1/(.+)/\L\1/g}.${2/(.+)/\L\1/g}', \$data);

    return \$data;
  }

  /**
   * Method to save the form data.
   *
   * @param   array    \$data  The form data.
   *
   * @return  boolean         True on success.
   *
   * @since   $3
   */
  public function save(\$data)
  {
    // Get the application.
    \$app    = JFactory::getApplication();
    \$filter = JFilterInput::getInstance();

    if (isset(\$data['metadata']) && isset(\$data['metadata']['author']))
    {
      \$data['metadata']['author'] = \$filter->clean(\$data['metadata']['author'], 'TRIM');
    }

    if (isset(\$data['created_by_alias']))
    {
      \$data['created_by_alias'] = \$filter->clean(\$data['created_by_alias'], 'TRIM');
    }

    if (isset(\$data['images']) && is_array(\$data['images']))
    {
      \$registry = new JRegistry;
      \$registry->loadArray(\$data['images']);
      \$data['images'] = (string) \$registry;
    }

    // Alter the ${4/(.+)/\L\1/g} for save as copy.
    if (\$app->input->get('task') == 'save2copy')
    {
      \$origTable = clone \$this->getTable();
      \$origTable->load(\$app->input->getInt('id'));

      if (\$data['${4/(.+)/\L\1/g}'] == \$origTable->${4/(.+)/\L\1/g})
      {
        list(\$${4/(.+)/\L\1/g}, \$alias) = \$this->generateNewTitle(0, \$data['alias'], \$data['${4/(.+)/\L\1/g}']);

        \$data['${4/(.+)/\L\1/g}'] = \$${4/(.+)/\L\1/g};
        \$data['alias'] = \$alias;
      }
      else
      {
        if (\$data['alias'] == \$origTable->alias)
        {
          \$data['alias'] = '';
        }
      }

      \$data['state'] = 0;
    }

    // Automatic handling of alias for empty fields
    if (in_array(\$app->input->get('task'), array('apply', 'save', 'save2new')) && (!isset(\$data['id']) || (int) \$data['id'] == 0))
    {
      if (\$data['alias'] == null)
      {
        if (JFactory::getConfig()->get('unicodeslugs') == 1)
        {
          \$data['alias'] = JFilterOutput::stringURLUnicodeSlug(\$data['${4/(.+)/\L\1/g}']);
        }
        else
        {
          \$data['alias'] = JFilterOutput::stringURLSafe(\$data['${4/(.+)/\L\1/g}']);
        }

        \$table = JTable::getInstance('${1/(.+)/\u\1/g}', 'JTable');

        if (\$table->load(array('alias' => \$data['alias'])))
        {
          \$msg = JText::_('COM_${1/(.+)/\U\1/g}_SAVE_WARNING');
        }

        list(\$${4/(.+)/\L\1/g}, \$alias) = \$this->generateNewTitle(0, \$data['alias'], \$data['${4/(.+)/\L\1/g}']);
        \$data['alias'] = \$alias;

        if (isset(\$msg))
        {
          \$app->enqueueMessage(\$msg, 'warning');
        }
      }
    }

    if (parent::save(\$data))
    {
      return true;
    }

    return false;
  }

  /**
   * A protected method to get a set of ordering conditions.
   *
   * @param   object  \$table  A record object.
   *
   * @return  array           An array of conditions to add to add to ordering queries.
   *
   * @since   $3
   */
  protected function getReorderConditions(\$table)
  {
    \$condition = array();

    return \$condition;
  }

  /**
   * Auto-populate the model state.
   *
   * Note. Calling getState in this method will result in recursion.
   *
   * @param   JForm   \$form   A JForm object.
   * @param   mixed   \$data   The data expected for the form.
   * @param   string  \$group  The name of the plugin group to import.
   *
   * @return  void
   *
   * @since   $3
   */
  protected function preprocessForm(JForm \$form, \$data, \$group = 'content')
  {
    // Association ${5/(.+)/\L\1/g} items.
    \$app   = JFactory::getApplication();
    \$assoc = JLanguageAssociations::isEnabled();

    if (\$assoc)
    {
      \$languages = JLanguageHelper::getLanguages('lang_code');
      \$addform   = new SimpleXMLElement('<form />');
      \$fields    = \$addform->addChild('fields');
      \$fields->addAttribute('name', 'associations');
      \$fieldset = \$fields->addChild('fieldset');
      \$fieldset->addAttribute('name', 'item_associations');
      \$fieldset->addAttribute('description', 'COM_${1/(.+)/\U\1/g}_ITEM_ASSOCIATIONS_FIELDSET_DESC');
      \$add = false;

      foreach (\$languages as \$tag => \$language)
      {
        if (empty(\$data['language']) || \$tag != \$data['language'])
        {
          \$add   = true;
          \$field = \$fieldset->addChild('field');
          \$field->addAttribute('name', \$tag);
          \$field->addAttribute('type', 'modal_${2/(.+)/\L\1/g}');
          \$field->addAttribute('language', \$tag);
          \$field->addAttribute('label', \$language->title);
          \$field->addAttribute('translate_label', 'false');
          \$field->addAttribute('edit', 'true');
          \$field->addAttribute('clear', 'true');
        }
      }

      if (\$add)
      {
        \$form->load(\$addform, false);
      }
    }

    parent::preprocessForm(\$form, \$data, \$group);
  }
}]]>
  </content>
  <tabTrigger>joomla-admin-model-edit-simple</tabTrigger>
  <scope>source.php</scope>
</snippet>