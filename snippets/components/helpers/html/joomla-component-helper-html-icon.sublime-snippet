<snippet>
	<content><![CDATA[/**
 * Method to generate a link to the create item page for the given category
 *
 * @param  object   \$category The category information
 * @param  Registry \$params   The item parameters
 * @param  array    \$attribs  Optional attributes for the link
 * @param  boolean  \$legacy   True to use legacy images, false to use icomoon based graphic
 *
 * @return string The HTML markup for the create item link
 *
 * @since  ${1:0.1.0}
 */
public static function create(\$category, \$params, \$attribs = array(), \$legacy = false)
{
  JHtml::_('bootstrap.tooltip');

  \$uri = JUri::getInstance();

  \$url = 'index.php?option=com_${2:project}&task=${3:singular}.add&return=' . base64_encode(\$uri) . '&${3/(.)/\l\1/g}_id=0&catid=' . \$category->id;

  if (\$params->get('show_icons'))
  {
    if (\$legacy)
    {
      \$text = JHtml::_('image', 'system/new.png', JText::_('JNEW'), null, true);
    }
    else
    {
      \$attribs['aria-label'] = JText::_('JNEW');
      \$text                  = '<span class="glyphicon glyphicon-plus" aria-hidden="true"></span>' . JText::_('JNEW');
    }
  }
  else
  {
    \$text = JText::_('JNEW');
  }

  if (isset(\$attribs['class']))
  {
    \$attribs['class'] = 'btn btn-default btn-xs extra-tooltip ' . \$attribs['class'];
  }
  else
  {
    \$attribs['class'] = 'btn btn-default btn-xs extra-tooltip';
  }

  \$attribs['title'] = JHtml::tooltipText('COM_${2/(.+)/\U\1/g}_CREATE_${3/(.+)/\U\1/g}');

  \$button = JHtml::_('link', JRoute::_(\$url), \$text, \$attribs);

  return \$button;
}

/**
 * Method to generate a link to the email item page for the given ${3/(.+)/\l\1/g}
 *
 * @param  object   \$item    The ${3/(.+)/\l\1/g} information
 * @param  Registry \$params  The item parameters
 * @param  array    \$attribs Optional attributes for the link
 * @param  boolean  \$legacy  True to use legacy images, false to use icomoon based graphic
 *
 * @return string The HTML markup for the email item link
 *
 * @since  $1
 */
public static function email(\$item, \$params, \$attribs = array(), \$legacy = false)
{
  JHtml::_('bootstrap.tooltip');

  require_once JPATH_SITE . '/components/com_mailto/helpers/mailto.php';

  \$uri      = JUri::getInstance();
  \$base     = \$uri->toString(array('scheme', 'host', 'port'));
  \$template = JFactory::getApplication()->getTemplate();
  \$link     = \$base . JRoute::_(${2/(.+)/\u\1/g}HelperRoute::get${3/(.+)/\u\1/g}Route(\$item->slug, \$item->catid, \$item->language), false);
  \$url      = 'index.php?option=com_mailto&tmpl=component&template=' . \$template . '&link=' . MailToHelper::addLink(\$link);

  \$status = 'width=400,height=350,menubar=yes,resizable=yes';

  if (\$params->get('show_icons'))
  {
    if (\$legacy)
    {
      \$text = JHtml::_('image', 'system/emailButton.png', JText::_('JGLOBAL_EMAIL'), null, true);
    }
    else
    {
      \$attribs['aria-label'] = JText::_('JGLOBAL_EMAIL');
      \$text = '<span class="glyphicon glyphicon-envelope" aria-hidden="true"></span>' . JText::_('JGLOBAL_EMAIL');
    }
  }
  else
  {
    \$text = JText::_('JGLOBAL_EMAIL');
  }

  if (isset(\$attribs['class']))
  {
    \$attribs['class'] = 'btn btn-default btn-xs extra-tooltip ' . \$attribs['class'];
  }
  else
  {
    \$attribs['class'] = 'btn btn-default btn-xs';
  }

  \$attribs['title']   = JText::_('JGLOBAL_EMAIL');
  \$attribs['onclick'] = "window.open(this.href,'win2','" . \$status . "'); return false;";
  \$attribs['rel']     = 'nofollow';

  \$button = JHtml::_('link', JRoute::_(\$url), \$text, \$attribs);

  return \$button;
}

/**
 * Display an edit icon for the ${3/(.+)/\l\1/g}.
 *
 * This icon will not display in a popup window, nor if the ${3/(.+)/\l\1/g} is trashed.
 * Edit access checks must be performed in the calling code.
 *
 * @param  object   \$item    The ${3/(.+)/\l\1/g} information
 * @param  Registry \$params  The item parameters
 * @param  array    \$attribs Optional attributes for the link
 * @param  boolean  \$legacy  True to use legacy images, false to use icomoon based graphic
 *
 * @return string The HTML for the ${3/(.+)/\l\1/g} edit icon.
 *
 * @since   $1
 */
public static function edit(\$item, \$params, \$attribs = array(), \$legacy = false)
{
  \$user = JFactory::getUser();
  \$uri  = JUri::getInstance();

  // Ignore if in a popup window.
  if (\$params && \$params->get('popup'))
  {
    return;
  }

  // Ignore if the state is negative (trashed).
  if (\$item->state < 0)
  {
    return;
  }

  JHtml::_('bootstrap.tooltip');

  // Show checked_out icon if the ${3/(.+)/\l\1/g} is checked out by a different user
  if (property_exists(\$item, 'checked_out')
    && property_exists(\$item, 'checked_out_time')
    && \$item->checked_out > 0
    && \$item->checked_out != \$user->get('id'))
  {
    \$checkoutUser = JFactory::getUser(\$item->checked_out);
    \$date         = JHtml::_('date', \$item->checked_out_time);
    \$tooltip      = JText::_('JLIB_HTML_CHECKED_OUT') . ' :: ' . JText::sprintf('COM_${2/(.+)/\U\1/g}_CHECKED_OUT_BY', \$checkoutUser->name) . ' <br /> ' . \$date;

    if (\$legacy)
    {
      \$button = JHtml::_('image', 'system/checked_out.png', null, null, true);
      \$text   = '<span class="hasTooltip" title="' . JHtml::tooltipText(\$tooltip . '', 0) . '">'
        . \$button . '</span> ' . JText::_('JLIB_HTML_CHECKED_OUT');
    }
    else
    {
      \$text = '<span class="hasTooltip icon-lock" title="' . JHtml::tooltipText(\$tooltip . '', 0) . '"></span> ' . JText::_('JLIB_HTML_CHECKED_OUT');
    }

    \$attribs['data-toggle'] = 'tooltip';
    \$attribs['title']       = JText::_('JGLOBAL_EMAIL');

    \$output = JHtml::_('link', '#', \$text, \$attribs);

    return \$output;
  }

  \$url = 'index.php?option=com_${2/(.+)/\l\1/g}&task=${3/(.+)/\l\1/g}.edit&${3/(.)/\l\1/g}_id=' . \$item->id . '&return=' . base64_encode(\$uri);

  if (\$item->state == 0)
  {
    \$overlib = JText::_('JUNPUBLISHED');
  }
  else
  {
    \$overlib = JText::_('JPUBLISHED');
  }

  \$date   = JHtml::_('date', \$item->created);
  \$author = \$item->created_by_alias ? \$item->created_by_alias : \$item->author;

  \$overlib .= '&lt;br /&gt;';
  \$overlib .= \$date;
  \$overlib .= '&lt;br /&gt;';
  \$overlib .= JText::sprintf('COM_${2/(.+)/\U\1/g}_WRITTEN_BY', htmlspecialchars(\$author, ENT_COMPAT, 'UTF-8'));

  if (\$legacy)
  {
    \$icon = \$item->state ? 'edit.png' : 'edit_unpublished.png';

    if (strtotime(\$item->publish_up) > strtotime(JFactory::getDate())
      || ((strtotime(\$item->publish_down) < strtotime(JFactory::getDate())) && \$item->publish_down != JFactory::getDbo()->getNullDate()))
    {
      \$icon = 'edit_unpublished.png';
    }

    \$text = JHtml::_('image', 'system/' . \$icon, JText::_('JGLOBAL_EDIT'), null, true);
  }
  else
  {
    \$icon = \$item->state ? 'edit' : 'eye-close';

    if (strtotime(\$item->publish_up) > strtotime(JFactory::getDate())
      || ((strtotime(\$item->publish_down) < strtotime(JFactory::getDate())) && \$item->publish_down != JFactory::getDbo()->getNullDate()))
    {
      \$icon = 'eye-close';
    }

    \$text = '<span class="hasTooltip icon-' . \$icon . ' tip" title="' . JHtml::tooltipText(JText::_('COM_${2/(.+)/\U\1/g}_EDIT_ITEM'), \$overlib, 0, 0)
      . '"></span>'
      . JText::_('JGLOBAL_EDIT');
  }

  \$output = JHtml::_('link', JRoute::_(\$url), \$text, \$attribs);

  return \$output;
}

/**
 * Method to generate a popup link to print an ${3/(.+)/\l\1/g}
 *
 * @param  object   \$item    The ${3/(.+)/\l\1/g} information
 * @param  Registry \$params  The item parameters
 * @param  array    \$attribs Optional attributes for the link
 * @param  boolean  \$legacy  True to use legacy images, false to use icomoon based graphic
 *
 * @return string The HTML markup for the popup link
 */
public static function print_popup(\$item, \$params, \$attribs = array(), \$legacy = false)
{
}

/**
 * Method to generate a link to print an ${3/(.+)/\l\1/g}
 *
 * @param  object   \$item    Not used, @deprecated for 4.0
 * @param  Registry \$params  The item parameters
 * @param  array    \$attribs Not used, @deprecated for 4.0
 * @param  boolean  \$legacy  True to use legacy images, false to use icomoon based graphic
 *
 * @return string The HTML markup for the popup link
 */
public static function print_screen(\$item, \$params, \$attribs = array(), \$legacy = false)
{
}]]></content>
	<tabTrigger>joomla-component-helper-html-icon</tabTrigger>
	<scope>source.php</scope>
  <description>Adds buttons on helper HTML Icon class of components.</description>
</snippet>