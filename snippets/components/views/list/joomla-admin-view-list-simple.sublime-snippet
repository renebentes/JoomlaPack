<snippet>
  <content><![CDATA[/**
 * View class for a list of ${1:Plural}.
 *
 * @package     Joomla.Administrator
 * @subpackage  Components.${2:Project}
 * @since       ${3:0.1.0}
 */
class ${2/(.+)/\u\1/g}View${1/(.+)/\u\1/g} extends JViewLegacy
{
  /**
   * Method to display the view.
   *
   * @param   string  \$tpl  A template file to load. [optional]
   *
   * @return  mixed         A string if successful, otherwise a JError object.
   *
   * @since   $3
   */
  public function display(\$tpl = null)
  {
    // Initialise variables.
    \$this->items         = \$this->get('Items');
    \$this->pagination    = \$this->get('Pagination');
    \$this->state         = \$this->get('State');
    \$this->authors       = \$this->get('Authors');
    \$this->filterForm    = \$this->get('FilterForm');
    \$this->activeFilters = \$this->get('ActiveFilters');

    // Check for errors.
    if (count(\$errors = \$this->get('Errors')))
    {
      JFactory::getApplication()->enqueueMessage(implode("\n", \$errors), 'error');
      return false;
    }

    // We do not need toolbar in the modal window.
    if (\$this->getLayout() !== 'modal')
    {
      // Load the submenu.
      ${2/(.+)/\u\1/g}Helper::addSubmenu('${1/(.+)/\L\1/g}');

      \$this->addToolbar();
      \$this->sidebar = JHtmlSidebar::render();
    }

    parent::display(\$tpl);
  }

  /**
   * Add the page title and toolbar.
   *
   * @return  void
   *
   * @since   $3
   */
  protected function addToolbar()
  {
    // Initialise Variables
    \$canDo = ${2/(.+)/\u\1/g}Helper::getActions('com_${2/(.+)/\L\1/g}');
    \$user  = JFactory::getUser();

    // Get the toolbar object instance.
    \$bar = JToolBar::getInstance('toolbar');

    JToolBarHelper::title(JText::_('COM_${2/(.+)/\U\1/g}_${1/(.+)/\U\1/g}_TITLE'), '${4:stack} ${1/(.+)/\L\1/g}');

    if (\$canDo->get('core.create'))
    {
      JToolbarHelper::addNew('${5:hello}.add');
    }

    if ((\$canDo->get('core.edit')) || (\$canDo->get('core.edit.own')))
    {
      JToolbarHelper::editList('${5/(.+)/\L\1/g}.edit');
    }

    if (\$canDo->get('core.edit.state'))
    {
      JToolbarHelper::publish('${1/(.+)/\L\1/g}.publish', 'JTOOLBAR_PUBLISH', true);
      JToolbarHelper::unpublish('${1/(.+)/\L\1/g}.unpublish', 'JTOOLBAR_UNPUBLISH', true);
      JToolbarHelper::archiveList('${1/(.+)/\L\1/g}.archive');
      JToolbarHelper::checkin('${1/(.+)/\L\1/g}.checkin');
    }

    // Add a batch button.
    if (\$user->authorise('core.create', 'com_${2/(.+)/\L\1/g}') && \$user->authorise('core.edit', 'com_${2/(.+)/\L\1/g}') && \$user->authorise('core.edit.state', 'com_${2/(.+)/\L\1/g}'))
    {
      // Load the modal bootstrap script.
      JHtml::_('bootstrap.modal', 'collapseModal');

      // Instantiate a new JLayoutFile instance and render the batch button.
      \$layout = new JLayoutFile('joomla.toolbar.batch');
      \$title  = JText::_('JTOOLBAR_BATCH');
      \$dhtml  = \$layout->render(array('title' => \$title));
      \$bar->appendButton('Custom', \$dhtml, 'batch');
    }

    if (\$this->state->get('filter.state') == -2 && \$canDo->get('core.delete'))
    {
      JToolbarHelper::deleteList('', '${1/(.+)/\L\1/g}.delete', 'JTOOLBAR_EMPTY_TRASH');
    }
    elseif (\$canDo->get('core.edit.state'))
    {
      JToolbarHelper::trash('${1/(.+)/\L\1/g}.trash');
    }

    if (\$canDo->get('core.admin', 'com_${2/(.+)/\L\1/g}'))
    {
      JToolBarHelper::preferences('com_${2/(.+)/\L\1/g}');
    }

    JToolBarHelper::help('${1/(.+)/\L\1/g}', \$com = true);
  }
}]]></content>
  <tabTrigger>joomla-admin-view-list-simple</tabTrigger>
  <scope>source.php</scope>
</snippet>
