<snippet>
	<content><![CDATA[/**
 * Routing class from ${1:Project} Component
 *
 * @package    Joomla.${2:Site}
 * @subpackage Components.${1/(.+)/\u\1/g}
 * @since      ${3:0.1.0}
 */
class ${1/(.+)/\u\1/g}Router extends JComponentRouterBase
{
	/**
   * Build the route for the com_${1/(.+)/\L\1/g} component
   *
   * @param  array &\$query An array of URL arguments
   *
   * @return array         The URL arguments to use to assemble the subsequent URL.
   *
   * @since  $3
   */
  public function build(&\$query)
  {
    \$segments = array();

    // Get a menu item based on Itemid or currently active
    \$params   = JComponentHelper::getParams('com_${1/(.+)/\L\1/g}');
    \$advanced = \$params->get('sef_advanced_link', 0);

    // We need a menu item. Either the one specified in the query, or the current active one if none specified
    if (empty(\$query['Itemid']))
    {
      \$menuItem      = \$this->menu->getActive();
      \$menuItemGiven = false;
    }
    else
    {
      \$menuItem      = \$this->menu->getItem(\$query['Itemid']);
      \$menuItemGiven = true;
    }

    // Check again
    if (\$menuItemGiven && isset(\$menuItem) && \$menuItem->component != 'com_${1/(.+)/\L\1/g}')
    {
      \$menuItemGiven = false;
      unset(\$query['Itemid']);
    }

    if (isset(\$query['view']))
    {
      \$view = \$query['view'];
    }
    else
    {
      // We need to have a view in the query or it is an invalid URL
      return \$segments;
    }

    // Are we dealing with an ${4:singular} or category that is attached to a menu item?
    if ((\$menuItem instanceof stdClass)
      && \$menuItem->query['view'] == \$query['view']
      && isset(\$query['id'])
      && \$menuItem->query['id'] == (int) \$query['id'])
    {
      unset(\$query['view']);

      if (isset(\$query['catid']))
      {
        unset(\$query['catid']);
      }

      if (isset(\$query['layout']))
      {
        unset(\$query['layout']);
      }

      unset(\$query['id']);

      return \$segments;
    }

    if (\$view == 'category' || \$view == '${4/(.+)/\L\1/g}')
    {
      if (!\$menuItemGiven)
      {
        \$segments[] = \$view;
      }

      unset(\$query['view']);

      if (\$view == '${4/(.+)/\L\1/g}')
      {
        if (isset(\$query['id']) && isset(\$query['catid']) && \$query['catid'])
        {
          \$catid = \$query['catid'];

          // Make sure we have the id and the alias.
          if (strpos(\$query['id'], ':') === false)
          {
            \$db = JFactory::getDbo();
            \$dbQuery = \$db->getQuery(true)
              ->select('alias')
              ->from('#__${1/(.+)/\L\1/g}$5')
              ->where('id = ' . (int) \$query['id']);
            \$db->setQuery(\$dbQuery);
            \$alias = \$db->loadResult();
            \$query['id'] = \$query['id'] . ':' . \$alias;
          }
        }
        else
        {
          // We should have these two set for this view. If we don't, it is an error.
          return \$segments;
        }
      }
      else
      {
        if (isset(\$query['id']))
        {
          \$catid = \$query['id'];
        }
        else
        {
          // We should have id set for this view. If we don't, it is an error.
          return \$segments;
        }
      }

      if (\$menuItemGiven && isset(\$menuItem->query['id']))
      {
        \$mCatid = \$menuItem->query['id'];
      }
      else
      {
        \$mCatid = 0;
      }

      \$categories = JCategories::getInstance('${1/(.+)/\u\1/g}');
      \$category   = \$categories->get(\$catid);

      if (!\$category)
      {
        // We could not find the category we were given. Bail.
        return \$segments;
      }

      \$path  = array_reverse(\$category->getPath());

      \$array = array();

      foreach (\$path as \$id)
      {
        if ((int) \$id == (int) \$mCatid)
        {
          break;
        }

        list(\$tmp, \$id) = explode(':', \$id, 2);

        \$array[] = \$id;
      }

      \$array = array_reverse(\$array);

      if (!\$advanced && count(\$array))
      {
        \$array[0] = (int) \$catid . ':' . \$array[0];
      }

      \$segments = array_merge(\$segments, \$array);

      if (\$view == '${4/(.+)/\L\1/g}')
      {
        if (\$advanced)
        {
          list(\$tmp, \$id) = explode(':', \$query['id'], 2);
        }
        else
        {
          \$id = \$query['id'];
        }

        \$segments[] = \$id;
      }

      unset(\$query['id']);
      unset(\$query['catid']);
    }

    /*
     * If the layout is specified and it is the same as the layout in the menu item, we
     * unset it so it doesn't go into the query string.
     */
    if (isset(\$query['layout']))
    {
      if (\$menuItemGiven && isset(\$menuItem->query['layout']))
      {
        if (\$query['layout'] == \$menuItem->query['layout'])
        {
          unset(\$query['layout']);
        }
      }
      else
      {
        if ($query['layout'] == 'default')
        {
          unset($query['layout']);
        }
      }
    }

    for (\$i = 0; \$i < count(\$segments); \$i++)
    {
      \$segments[\$i] = str_replace(':', '-', \$segments[\$i]);
    }

    return \$segments;
    }
  }

  /**
   * Parse the segments of a URL.
   *
   * @param  array &\$segments The segments of the URL to parse.
   *
   * @return array            The URL attributes to be used by the application.
   *
   * @since  $3
   */
  public function parse(&\$segments)
  {
    \$vars = array();

    for (\$i = 0; \$i < count(\$segments); \$i++)
    {
      \$segments[\$i] = preg_replace('/-/', ':', \$segments[\$i], 1);
    }

    // Get the active menu item.
    \$item     = \$this->menu->getActive();
    \$params   = JComponentHelper::getParams('com_${1/(.+)/\L\1/g}');
    \$advanced = \$params->get('sef_advanced_link', 0);
    \$db       = \JFactory::getDbo();

    // Count route segments
    $count = count($segments);

    /*
     * Standard routing for ${6:plural}. If we don't pick up an Itemid then we get the view from the segments
     * the first segment is the view and the last segment is the id of the '${4/(.+)/\L\1/g}' or category.
     */
    if (!isset(\$item))
    {
      \$vars['view'] = \$segments[0];
      \$vars['id']   = \$segments[\$count - 1];

      return \$vars;
    }

    /*
     * If there is only one segment, then it points to either an ${4/(.+)/\L\1/g} or a category.
     * We test it first to see if it is a category. If the id and alias match a category,
     * then we assume it is a category. If they don't we assume it is an ${4/(.+)/\L\1/g}
     */
    if (\$count == 1)
    {
      // We check to see if an alias is given.  If not, we assume it is an ${4/(.+)/\L\1/g}
      if (strpos(\$segments[0], ':') === false)
      {
        \$vars['view'] = '${4/(.+)/\L\1/g}';
        \$vars['id']   = (int) \$segments[0];

        return \$vars;
      }

      list(\$id, \$alias) = explode(':', \$segments[0], 2);

      // First we check if it is a category
      \$category = JCategories::getInstance('${1/(.+)/\u\1/g}')->get(\$id);

      if (\$category && \$category->alias == \$alias)
      {
        \$vars['view'] = 'category';
        \$vars['id']   = \$id;

        return \$vars;
      }
      else
      {
        \$query = \$db->getQuery(true)
          ->select(\$db->quoteName(array('alias', 'catid')))
          ->from(\$db->quoteName('#__${1/(.+)/\L\1/g}${5/(.+)/\L\1/g}'))
          ->where(\$db->quoteName('id') . ' = ' . (int) \$id);
        \$db->setQuery(\$query);
        \$${4/(.+)/\L\1/g} = \$db->loadObject();

        if (\$${4/(.+)/\L\1/g})
        {
          if (\$${4/(.+)/\L\1/g}->alias == \$alias)
          {
            \$vars['view']  = '${4/(.+)/\L\1/g}';
            \$vars['catid'] = (int) \$${4/(.+)/\L\1/g}->catid;
            \$vars['id']    = (int) \$id;

            return \$vars;
          }
        }
      }
    }

    /*
     * If there was more than one segment, then we can determine where the URL points to
     * because the first segment will have the target category id prepended to it. If the
     * last segment has a number prepended, it is an ${4/(.+)/\L\1/g}, otherwise, it is a category.
     */
    if (!\$advanced)
    {
      \$cat_id = (int) \$segments[0];

      \$${4/(.+)/\L\1/g}_id = (int) \$segments[\$count - 1];

      if (\$${4/(.+)/\L\1/g}_id > 0)
      {
        \$vars['view']  = '${4/(.+)/\L\1/g}';
        \$vars['catid'] = \$cat_id;
        \$vars['id']    = \$${4/(.+)/\L\1/g}_id;
      }
      else
      {
        \$vars['view'] = 'category';
        \$vars['id']   = \$cat_id;
      }

      return \$vars;
    }

    // We get the category id from the menu item and search from there
    \$id       = \$item->query['id'];
    \$category = JCategories::getInstance('#__${1/(.+)/\u\1/g}')->get($id);

    if (!\$category)
    {
      JFactory::getApplication()->enqueueMessage(JText::_('COM_${1/(.+)/\U\1/g}_ERROR_PARENT_CATEGORY_NOT_FOUND'), 'error');

      return \$vars;
    }

    \$categories    = \$category->getChildren();
    \$vars['catid'] = \$id;
    \$vars['id']    = \$id;
    \$found         = 0;

    foreach (\$segments as \$segment)
    {
      \$segment = str_replace(':', '-', \$segment);

      foreach (\$categories as \$category)
      {
        if (\$category->alias == \$segment)
        {
          \$vars['id']    = \$category->id;
          \$vars['catid'] = \$category->id;
          \$vars['view']  = 'category';
          \$categories    = \$category->getChildren();
          \$found         = 1;
          break;
        }
      }

      if (\$found == 0)
      {
        if (\$advanced)
        {
          \$db    = JFactory::getDbo();
          \$query = \$db->getQuery(true)
            ->select(\$db->quoteName('id'))
            ->from('#__${1/(.+)/\L\1/g}${5/(.+)/\L\1/g}')
            ->where(\$db->quoteName('catid') . ' = ' . (int) \$vars['catid'])
            ->where(\$db->quoteName('alias') . ' = ' . \$db->quote(\$segment));
          \$db->setQuery(\$query);
          \$cid = \$db->loadResult();
        }
        else
        {
          \$cid = \$segment;
        }

        \$vars['id']   = \$cid;
        \$vars['view'] = '${4/(.+)/\L\1/g}';
      }

      \$found = 0;
    }

    return \$vars;
  }
}]]></content>
	<tabTrigger>joomla-site-router</tabTrigger>
	<scope>source.php</scope>
</snippet>