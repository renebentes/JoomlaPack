<snippet>
	<content><![CDATA[/**
 * Methods supporting a list of ${1:singular} records.
 *
 * @package     Joomla.${2:Administrator}
 * @subpackage  com_${3:project}
 * @since       ${4:0.0.1}
 */
class ${3/(.+)/\u\1/g}Model${5:Plural} extends JModelList
{
	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 *
	 * @since   $4
	 */
	public function __construct(\$config = array())
	{
		if (empty(\$config['filter_fields']))
		{
			\$config['filter_fields'] = array(
				'id', 'a.id',
				'${6:title}', 'a.${6/(.+)/\L\1/g}',
				'alias', 'a.alias',
				'checked_out', 'a.checked_out',
				'checked_out_time', 'a.checked_out_time',
				'state', 'a.state',
				'access', 'a.access', 'access_level',
				'created', 'a.created',
				'created_by', 'a.created_by',
				'created_by_alias', 'a.created_by_alias',
				'ordering', 'a.ordering',
				'publish_up', 'a.publish_up',
				'publish_down', 'a.publish_down',
				'author_id'
			);
		}

		parent::__construct(\$config);
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field.
	 * @param   string  \$direction  An optional direction (asc|desc).
	 *
	 * @return	void
	 *
	 * @since	$4
	 */
	protected function populateState(\$ordering = null, \$direction = null)
	{
		// Get the input.
		\$input = JFactory::getApplication()->input;

		// Adjust the context to support modal layouts.
		if (\$layout = \$input->get('layout'))
		{
			\$this->context .= '.' . \$layout;
		}

		// Load the filter state.
		\$search = \$this->getUserStateFromRequest(\$this->context . '.filter.search', 'filter_search');
		\$this->setState('filter.search', \$search);

		\$authorId = \$this->getUserStateFromRequest(\$this->context . '.filter.author_id', 'filter_author_id');
		\$this->setState('filter.author_id', \$authorId);

		\$published = \$this->getUserStateFromRequest(\$this->context . '.filter.state', 'filter_state', '');
		\$this->setState('filter.state', \$published);

		// List state information.
		parent::populateState('a.${6/(.+)/\L\1/g}', 'asc');
	}

	/**
	 * Method to get a store id based on model configuration state.\$
	 *
	 * This is necessary because the model is used by the component and
	 * different modules that might need different sets of data or different
	 * ordering requirements.
	 *
	 * @param   string  \$id  A prefix for the store id.
	 *
	 * @return  string  A store id.
	 *
	 * @since   $4
	 */
	protected function getStoreId(\$id = '')
	{
		// Compile the store id.
		\$id .= ':' . \$this->getState('filter.search');
		\$id .= ':' . \$this->getState('filter.author_id');
		\$id .= ':' . \$this->getState('filter.state');

		return parent::getStoreId(\$id);
	}

	/**
	 * Build an SQL query to load the list data.
	 *
	 * @return	JDatabaseQuery
	 *
	 * @since	$4
	 */
	protected function getListQuery()
	{
		// Create a new query object.
		\$db    = \$this->getDbo();
		\$query = \$db->getQuery(true);
		\$user  = JFactory::getUser();

		// Select the required fields from the table.
		\$query->select(
			\$this->getState(
				'list.select',
				'a.id, a.${6/(.+)/\L\1/g}, a.alias, a.checked_out, a.checked_out_time, ' .
				'a.state, a.ordering, a.created, a.created_by, a.created_by_alias, ' .
				'a.publish_up, a.publish_down'
			)
		);
		\$query->from(\$db->quoteName('#__${7:${3/(.+)/\L\1/g}}') . ' AS a');

		// Join over the users for the checked out user.
		\$query->select('uc.name AS editor');
		\$query->join('LEFT', '#__users AS uc ON uc.id = a.checked_out');

		// Join over the users for the author.
		\$query->select('ua.name AS author_name')
			->join('LEFT', '#__users AS ua ON ua.id = a.created_by');

		// Filter by published state.
		\$published = \$this->getState('filter.state');
		if (is_numeric(\$published))
		{
			\$query->where('a.state = ' . (int) \$published);
		}
		elseif (\$published === '')
		{
			\$query->where('(a.state = 0 OR a.state = 1)');
		}

		// Filter by author.
		\$authorId = \$this->getState('filter.author_id');
		if (is_numeric(\$authorId))
		{
			\$type = \$this->getState('filter.author_id.include', true) ? '= ' : '<>';
			\$query->where('a.created_by ' . \$type . (int) \$authorId);
		}

		// Filter by search in ${6/(.+)/\L\1/g}.
		\$search = \$this->getState('filter.search');
		if (!empty(\$search))
		{
			if (stripos(\$search, 'id:') === 0)
			{
				\$query->where('a.id = ' . (int) substr(\$search, 3));
			}
			elseif (stripos(\$search, 'author:') === 0)
			{
				\$search = \$db->quote('%' . \$db->escape(substr(\$search, 7), true) . '%');
				\$query->where('(ua.name LIKE ' . \$search . ' OR ua.username LIKE ' . \$search . ')');
			}
			else
			{
				\$search = \$db->quote('%' . \$db->escape(\$search, true) . '%');
				\$query->where('(a.${6/(.+)/\L\1/g} LIKE ' . \$search . ' OR a.alias LIKE ' . \$search . ')');
			}
		}

		// Add the list ordering clause.
		\$orderCol  = \$this->state->get('list.ordering', 'a.${6/(.+)/\L\1/g}');
		\$orderDirn = \$this->state->get('list.direction', 'asc');

		\$query->order(\$db->escape(\$orderCol . ' ' . \$orderDirn));
		return \$query;
	}

	/**
	 * Build a list of authors.
	 *
	 * @return  JDatabaseQuery
	 *
	 * @since   $4
	 */
	public function getAuthors()
	{
		// Create a new query object.
		\$db = \$this->getDbo();
		\$query = \$db->getQuery(true);
		// Construct the query.
		\$query->select('u.id AS value, u.name AS text')
			->from(\$db->quoteName('#__users') . ' AS u')
			->join('INNER', \$db->quoteName('#__${7/(.+)/\L\1/g}') . ' AS c ON c.created_by = u.id')
			->group(\$db->quoteName(array('u.id', 'u.name')))
			->order(\$db->quoteName('u.name'));
		// Setup the query.
		\$db->setQuery(\$query);
		// Return the result.
		return \$db->loadObjectList();
	}
}]]>
	</content>
	<tabTrigger>joomla-admin-model-list-simple</tabTrigger>
	<scope>source.php</scope>
</snippet>