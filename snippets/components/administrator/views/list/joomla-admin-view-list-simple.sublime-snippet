<snippet>
	<content><![CDATA[/**
 * View class for a list of ${1:Hellos}.
 *
 * @package     Joomla.${2:Administrator}
 * @subpackage  com_${3:project}
 * @since       ${4:0.0.1}
 */
class ${3/(.+)/\u\1/g}View${1/(.+)/\u\1/g} extends JViewLegacy
{
	/**
	 * Method to display the view.
	 *
	 * @param  string \$tpl A template file to load. [optional]
	 *
	 * @return mixed  A string if successful, otherwise a JError object.
	 *
	 * @since  $4
	 */
	public function display(\$tpl = null)
	{
		// Initialise variables.
		\$this->items         = \$this->get('Items');
		\$this->pagination    = \$this->get('Pagination');
		\$this->state         = \$this->get('State');
		\$this->authors       = \$this->get('Authors');
		\$this->filterForm    = \$this->get('FilterForm');
		\$this->activeFilters = \$this->get('ActiveFilters');

		// Check for errors.
		if (count(\$errors = \$this->get('Errors')))
		{
			JFactory::getApplication()->enqueueMessage(implode("\n", \$errors), 'error');
			return false;
		}

		// We do not need toolbar in the modal window.
		if (\$this->getLayout() !== 'modal')
		{
			// Load the submenu.
			${3/(.+)/\u\1/g}Helper::addSubmenu('${1/(.+)/\L\1/g}');

			\$this->addToolbar();
			\$this->sidebar = JHtmlSidebar::render();
		}

		parent::display(\$tpl);
	}

	/**
	 * Add the page title and toolbar.
	 *
	 * @return void
	 *
	 * @since  $4
	 */
	protected function addToolbar()
	{
		// Initialise Variables
		\$canDo = ${3/(.+)/\u\1/g}Helper::getActions('com_${3/(.+)/\u\1/g}');
		\$user  = JFactory::getUser();

		// Get the toolbar object instance.
		\$bar = JToolBar::getInstance('toolbar');

		JToolBarHelper::title(JText::_('COM_${3/(.+)/\U\1/g}_MANAGER_${1/(.+)/\U\1/g}'), '${5:stack} ${1/(.+)/\L\1/g}');

		if (\$canDo->get('core.create'))
		{
			JToolbarHelper::addNew('${6:hello}.add');
		}

		if ((\$canDo->get('core.edit')) || (\$canDo->get('core.edit.own')))
		{
			JToolbarHelper::editList('${6/(.+)/\L\1/g}.edit');
		}

		if (\$canDo->get('core.edit.state'))
		{
			JToolbarHelper::publish('${1/(.+)/\L\1/g}.publish', 'JTOOLBAR_PUBLISH', true);
			JToolbarHelper::unpublish('${1/(.+)/\L\1/g}.unpublish', 'JTOOLBAR_UNPUBLISH', true);
			JToolbarHelper::archiveList('${1/(.+)/\L\1/g}.archive');
			JToolbarHelper::checkin('${1/(.+)/\L\1/g}.checkin');
		}

		// Add a batch button.
		if (\$user->authorise('core.create', 'com_${3/(.+)/\L\1/g}') && \$user->authorise('core.edit', 'com_${3/(.+)/\L\1/g}') && \$user->authorise('core.edit.state', 'com_${3/(.+)/\L\1/g}'))
		{
			// Load the modal bootstrap script.
			JHtml::_('bootstrap.modal', 'collapseModal');

			// Instantiate a new JLayoutFile instance and render the batch button.
			\$layout = new JLayoutFile('joomla.toolbar.batch');
			\$title  = JText::_('JTOOLBAR_BATCH');
			\$dhtml  = \$layout->render(array('title' => \$title));
			\$bar->appendButton('Custom', \$dhtml, 'batch');
		}

		if (\$state->get('filter.state') == -2 && \$canDo->get('core.delete'))
		{
			JToolbarHelper::deleteList('', '${1/(.+)/\L\1/g}.delete', 'JTOOLBAR_EMPTY_TRASH');
		}
		elseif (\$canDo->get('core.edit.state'))
		{
			JToolbarHelper::trash('${1/(.+)/\L\1/g}.trash');
		}

		if (\$canDo->get('core.admin'))
		{
			JToolBarHelper::preferences('com_${3/(.+)/\L\1/g}');
		}

		JToolBarHelper::help('${1/(.+)/\L\1/g}', \$com = true);
	}
}]]></content>
	<tabTrigger>joomla-admin-view-list-simple</tabTrigger>
	<scope>source.php</scope>
</snippet>
