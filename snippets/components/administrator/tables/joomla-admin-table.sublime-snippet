<snippet>
	<content><![CDATA[/**
 * ${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} Table class.
 *
 * @package     Joomla.${2:Administrator}
 * @subpackage  com_${3:project}
 * @since       ${4:0.0.1}
 */
class ${3/(.+)/\u\1/g}Table${1/(.+)/\u\1/g} extends JTable
{
	/**
	 * Constructor.
	 *
	 * @param JDatabaseDriver \$db A database connector object.
	 *
	 * @since $4
	 */
	public function __construct(JDatabaseDriver \$db)
	{
		parent::__construct('#__${3/(.+)/\L\1/g}$5', 'id', \$db);
	}

	/**
	 * Overloaded check method to ensure data integrity.
	 *
	 * @return boolean True on success, false on failure.
	 *
	 * @see    JTable::check()
	 * @since  $4
	 */
	public function check()
	{
		// Check for valid ${6:title}.
		if (trim(\$this->${6/(.+)/\L\1/g}) == '')
		{
			\$this->setError(JText::_('COM_${3/(.+)/\U\1/g}_ERROR_TABLE_${6/(.+)/\U\1/g}'));

			return false;
		}

		// Set alias.
		if (trim(\$this->alias) == '')
		{
			\$this->alias = \$this->${6/(.+)/\L\1/g};
		}

		\$this->alias = JApplication::stringURLSafe(\$this->alias);
		if (trim(str_replace('-', '', \$this->alias)) == '')
		{
			\$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');
		}

		// Check the publish down date is not earlier than publish up.
		if (\$this->publish_down > \$this->_db->getNullDate() && \$this->publish_down < \$this->publish_up)
		{
			// Swap the dates.
			\$temp               = \$this->publish_up;
			\$this->publish_up   = \$this->publish_down;
			\$this->publish_down = \$temp;
		}

		return true;
	}

	/**
	 * Overload the store method for the ${7:Plural} table.
	 *
	 * @param  boolean \$updateNulls Toggle whether null values should be updated.
	 *
	 * @return boolean True on success, false on failure.
	 *
	 * @since  $4
	 */
	public function store(\$updateNulls = false)
	{
		// Initialiase variables.
		\$date = JFactory::getDate();
		\$user = JFactory::getUser();

		if (\$this->id)
		{
			// Existing item.
			\$this->modified    = \$date->toSql();
			\$this->modified_by = \$user->get('id');
		}
		else
		{
			// New ${1/(.+)/\L\1/g}. A ${1/(.+)/\L\1/g} created and created_by field can be set by the user,
			// so we do not touch either of these if they are set.
			if (!(int) \$this->created)
			{
				\$this->created = \$date->toSql();
			}
			if (empty(\$this->created_by))
			{
				\$this->created_by = \$user->get('id');
			}
		}

		// Set publish_up to null date if not set
		if (!\$this->publish_up)
		{
			\$this->publish_up = \$this->_db->getNullDate();
		}

		// Set publish_down to null date if not set
		if (!\$this->publish_down)
		{
			\$this->publish_down = \$this->_db->getNullDate();
		}

		// Verify that the alias is unique.
		\$table = JTable::getInstance('${1/(.+)/\u\1/g}', '${3/(.+)/\u\1/g}Table');

		if (\$table->load(array('alias' => \$this->alias)) && (\$table->id != \$this->id || \$this->id == 0))
		{
			\$this->setError(JText::_('COM_${3/(.+)/\U\1/g}_ERROR_TABLE_UNIQUE_ALIAS'));
			return false;
		}

		return parent::store(\$updateNulls);
	}

	/**
	 * Method to set the publishing state for a row or list of rows in the database
	 * table. The method respects checked out rows by other users and will attempt
	 * to checkin rows that it can after adjustments are made.
	 *
	 * @param  mixed   \$pks    An optional array of primary key values to update. If not
	 *                          set the instance property value is used.
	 * @param  integer \$state  The publishing state. eg. [0 = unpublished, 1 = published]
	 * @param  integer \$userId The user id of the user performing the operation.
	 *
	 * @return boolean True on success.
	 *
	 * @since  $4
	 */
	public function publish(\$pks = null, \$state = 1, \$userId = 0)
	{
		// Initialiase variables.
		\$k = \$this->_tbl_key;

		// Sanitize input.
		JArrayHelper::toInteger(\$pks);
		\$userId = (int) \$userId;
		\$state  = (int) \$state;

		// If there are no primary keys set check to see if the instance key is set.
		if (empty(\$pks))
		{
			if (\$this->\$k)
			{
				\$pks = array(\$this->\$k);
			}
			// Nothing to set publishing state on, return false.
			else
			{
				\$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));
				return false;
			}
		}

		// Build the WHERE clause for the primary keys.
		\$where = \$k . '=' . implode(' OR ' . \$k . '=', \$pks);

		// Determine if there is checkin support for the table.
		if (!property_exists(\$this, 'checked_out') || !property_exists(\$this, 'checked_out_time'))
		{
			\$checkin = '';
		}
		else
		{
			\$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) \$userId . ')';
		}

		// Get the JDatabaseQuery object.
		\$query = \$this->_db->getQuery(true);

		// Update the publishing state for rows with the given primary keys.
		\$query->update(\$this->_db->quoteName(\$this->_tbl))
			->set(\$this->_db->quoteName('state') . ' = ' . (int) \$state)
			->where('(' . \$where . ')' . \$checkin);
		\$this->_db->setQuery(\$query);

		try
		{
			\$this->_db->execute();
		}
		catch (RuntimeException \$e)
		{
			\$this->setError(\$e->getMessage());
			return false;
		}

		// If checkin is supported and all rows were adjusted, check them in.
		if (\$checkin && (count(\$pks) == \$this->_db->getAffectedRows()))
		{
			// Checkin the rows.
			foreach (\$pks as \$pk)
			{
				\$this->checkin(\$pk);
			}
		}

		// If the JTable instance value is in the list of primary keys that were set, set the instance.
		if (in_array(\$this->\$k, \$pks))
		{
			\$this->state = \$state;
		}

		\$this->setError('');
		return true;
	}
}]]></content>
	<tabTrigger>joomla-admin-table</tabTrigger>
	<scope>source.php</scope>
</snippet>
