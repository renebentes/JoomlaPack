<snippet>
	<content><![CDATA[/**
 * ${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} Table class.
 *
 * @package    Joomla.${2:Administrator}
 * @subpackage com_${3:project}
 * @since      ${4:0.0.1}
 */
class ${3/(.+)/\u\1/g}Table${1/(.+)/\u\1/g} extends JTable
{
	/**
	 * Constructor.
	 *
	 * @param JDatabaseDriver \$db A database connector object.
	 *
	 * @since $4
	 */
	public function __construct(JDatabaseDriver \$db)
	{
		parent::__construct('#__${3/(.+)/\L\1/g}$5', 'id', \$db);

		JTableObserverTags::createObserver(\$this, array('typeAlias' => 'com_${3/(.+)/\L\1/g}.${1/(.+)/\L\1/g}'));
		JTableObserverContenthistory::createObserver(\$this, array('typeAlias' => 'com_${3/(.+)/\L\1/g}.${1/(.+)/\L\1/g}'));
	}

	/**
	 * Method to compute the default name of the asset.
	 * The default name is in the form table_name.id
	 * where id is the value of the primary key of the table.
	 *
	 * @return string
	 *
	 * @since  $4
	 */
	protected function _getAssetName()
	{
		\$k = \$this->_tbl_key;

		return 'com_${3/(.+)/\L\1/g}.${1/(.+)/\L\1/g}.' . (int) \$this->\$k;
	}

	/**
	 * Method to return the title to use for the asset table.
	 *
	 * @return string
	 *
	 * @since  $4
	 */
	protected function _getAssetTitle()
	{
		return \$this->${6:title};
	}

	/**
	 * Method to get the parent asset id for the record.
	 *
	 * @param  JTable  \$table A JTable object (optional) for the asset parent.
	 * @param  integer \$id    The id (optional) of the content.
	 *
	 * @return integer
	 *
	 * @since  $4
	 */
	protected function _getAssetParentId(JTable \$table = null, \$id = null)
	{
		\$assetId = null;

		// This is a ${1/(.+)/\L\1/g} under a category.
		if (\$this->catid)
		{
			// Build the query to get the asset id for the parent category.
			\$query = \$this->_db->getQuery(true)
				->select(\$this->_db->quoteName('asset_id'))
				->from(\$this->_db->quoteName('#__categories'))
				->where(\$this->_db->quoteName('id') . ' = ' . (int) \$this->catid);

			// Get the asset id from the database.
			\$this->_db->setQuery(\$query);

			if (\$result = \$this->_db->loadResult())
			{
				\$assetId = (int) \$result;
			}
		}

		// Return the asset id.
		if (\$assetId)
		{
			return \$assetId;
		}
		else
		{
			return parent::_getAssetParentId(\$table, \$id);
		}
	}

	/**
	 * Overloaded bind function to pre-process the params.
	 *
	 * @param  array \$array  Named array.
	 * @param  mixed \$ignore An optional array or space separated list of properties
	 *                        to ignore while binding. [optional]
	 *
	 * @return mixed          Null if operation was satisfactory, otherwise returns
	 *                        an error string.
	 *
	 * @see    JTable::bind()
	 * @since  $4
	 */
	public function bind(\$array, \$ignore = '')
	{
		if (isset(\$array['params']) && is_array(\$array['params']))
		{
			\$registry = new JRegistry;
			\$registry->loadArray(\$array['params']);
			\$array['params'] = (string) \$registry;
		}

		if (isset(\$array['metadata']) && is_array(\$array['metadata']))
		{
			\$registry = new JRegistry;
			\$registry->loadArray(\$array['metadata']);
			\$array['metadata'] = (string) \$registry;
		}

		if (isset(\$array['images']) && is_array(\$array['images']))
		{
			\$registry = new JRegistry;
			\$registry->loadArray(\$array['images']);
			\$array['images'] = (string) \$registry;
		}

		// Bind the rules.
		if (isset(\$array['rules']) && is_array(\$array['rules']))
		{
			\$rules = new JAccessRules(\$array['rules']);
			\$this->setRules(\$rules);
		}

		return parent::bind(\$array, \$ignore);
	}

	/**
	 * Overloaded check method to ensure data integrity.
	 *
	 * @return boolean         True on success, false on failure.
	 *
	 * @see    JTable::check()
	 * @since  $4
	 */
	public function check()
	{
		// Check for valid ${6/(.+)/\L\1/g}.
		if (trim(\$this->${6/(.+)/\L\1/g}) == '')
		{
			\$this->setError(JText::_('COM_${3/(.+)/\U\1/g}_ERROR_TABLE_${6/(.+)/\U\1/g}'));

			return false;
		}

		// Set alias.
		if (trim(\$this->alias) == '')
		{
			\$this->alias = \$this->${6/(.+)/\L\1/g};
		}

		\$this->alias = JApplicationHelper::stringURLSafe(\$this->alias);
		if (trim(str_replace('-', '', \$this->alias)) == '')
		{
			\$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');
		}

		/**
		 * Ensure any new items have compulsory fields set. This is needed for things like
		 * frontend editing where we don't show all the fields or using some kind of API
		 */
		if (!$this->id)
		{
			// Params can be an empty json string
			if (!isset($this->params))
			{
				$this->params = '{}';
			}

			// Images can be an empty json string
			if (!isset($this->images))
			{
				$this->images = '{}';
			}

			// Metadata can be an empty json string
			if (!isset($this->metadata))
			{
				$this->metadata = '{}';
			}

			// If we don't have any access rules set at this point just use an empty JAccessRules class
			if (!isset(\$this->rules))
			{
				\$rules = \$this->getDefaultAssetValues('com_${3/(.+)/\U\1/g}');
				\$this->setRules(\$rules);
			}
		}

		// Check the publish down date is not earlier than publish up.
		if (\$this->publish_down > \$this->_db->getNullDate() && \$this->publish_down < \$this->publish_up)
		{
			// Swap the dates.
			\$temp               = \$this->publish_up;
			\$this->publish_up   = \$this->publish_down;
			\$this->publish_down = \$temp;
		}

		/*
		 * Clean up keywords -- eliminate extra spaces between phrases
		 * and cr (\r) and lf (\n) characters from string.
		 * Only process if not empty.
		 */
		if (!empty(\$this->metakey))
		{
			// Array of characters to remove.
			\$bad_characters = array("\n", "\r", "\"", "<", ">");

			// Remove bad characters.
			\$after_clean = JString::str_ireplace(\$bad_characters, "", \$this->metakey);

			// Create array using commas as delimiter.
			\$keys = explode(',', \$after_clean);
			\$clean_keys = array();

			foreach (\$keys as \$key)
			{
				// Ignore blank keywords.
				if (trim(\$key))
				{
					\$clean_keys[] = trim(\$key);
				}
			}

			// Put array back together delimited by ", ".
			\$this->metakey = implode(", ", \$clean_keys);
		}

		// Clean up description -- eliminate quotes and <> brackets
		if (!empty($this->metadesc))
		{
			// Only process if not empty
			\$bad_characters = array("\"", "<", ">");
			\$this->metadesc = JString::str_ireplace(\$bad_characters, "", \$this->metadesc);
		}

		return true;
	}

	/**
	 * Gets the default asset values for a component.
	 *
	 * @param  $string      \$component The component asset name to search for
	 *
	 * @return JAccessRules            The JAccessRules object for the asset
	 */
	protected function getDefaultAssetValues(\$component)
	{
		// Need to find the asset id by the name of the component.
		\$db    = JFactory::getDbo();
		\$query = \$db->getQuery(true)
			->select(\$db->quoteName('id'))
			->from(\$db->quoteName('#__assets'))
			->where(\$db->quoteName('name') . ' = ' . \$db->quote(\$component));
		\$db->setQuery(\$query);
		\$assetId = (int) \$db->loadResult();

		return JAccess::getAssetRules(\$assetId);
	}

	/**
	 * Overload the store method for the ${7:Plural} table.
	 *
	 * @param  boolean \$updateNulls Toggle whether null values should be updated.
	 *
	 * @return boolean              True on success, false on failure.
	 *
	 * @since  $4
	 */
	public function store(\$updateNulls = false)
	{
		// Initialiase variables.
		\$date = JFactory::getDate();
		\$user = JFactory::getUser();

		if (\$this->id)
		{
			// Existing item.
			\$this->modified    = \$date->toSql();
			\$this->modified_by = \$user->get('id');
		}
		else
		{
			// New ${1/(.+)/\L\1/g}. A ${1/(.+)/\L\1/g} created and created_by field can be set by the user,
			// so we do not touch either of these if they are set.
			if (!(int) \$this->created)
			{
				\$this->created = \$date->toSql();
			}
			if (empty(\$this->created_by))
			{
				\$this->created_by = \$user->get('id');
			}
		}

		// Verify that the alias is unique.
		\$table = JTable::getInstance('${1/(.+)/\u\1/g}', '${3/(.+)/\u\1/g}Table');

		if (\$table->load(array('alias' => \$this->alias, 'catid' => \$this->catid)) && (\$table->id != \$this->id || \$this->id == 0))
		{
			\$this->setError(JText::_('COM_${3/(.+)/\U\1/g}_ERROR_TABLE_UNIQUE_ALIAS'));
			return false;
		}

		return parent::store(\$updateNulls);
	}

	/**
	 * Method to set the publishing state for a row or list of rows in the database
	 * table. The method respects checked out rows by other users and will attempt
	 * to checkin rows that it can after adjustments are made.
	 *
	 * @param  mixed   \$pks    An optional array of primary key values to update. If not
	 *                          set the instance property value is used.
	 * @param  integer \$state  The publishing state. eg. [0 = unpublished, 1 = published]
	 * @param  integer \$userId The user id of the user performing the operation.
	 *
	 * @return boolean          True on success.
	 *
	 * @since  $4
	 */
	public function publish(\$pks = null, \$state = 1, \$userId = 0)
	{
		// Initialiase variables.
		\$k = \$this->_tbl_key;

		// Sanitize input.
		JArrayHelper::toInteger(\$pks);
		\$userId = (int) \$userId;
		\$state  = (int) \$state;

		// If there are no primary keys set check to see if the instance key is set.
		if (empty(\$pks))
		{
			if (\$this->\$k)
			{
				\$pks = array(\$this->\$k);
			}
			// Nothing to set publishing state on, return false.
			else
			{
				\$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));
				return false;
			}
		}

		// Build the WHERE clause for the primary keys.
		\$where = \$k . '=' . implode(' OR ' . \$k . '=', \$pks);

		// Determine if there is checkin support for the table.
		if (!property_exists(\$this, 'checked_out') || !property_exists(\$this, 'checked_out_time'))
		{
			\$checkin = '';
		}
		else
		{
			\$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) \$userId . ')';
		}

		// Update the publishing state for rows with the given primary keys.
		\$query = \$this->_db->getQuery(true)
			->update(\$this->_db->quoteName(\$this->_tbl))
			->set(\$this->_db->quoteName('state') . ' = ' . (int) \$state)
			->where('(' . \$where . ')' . \$checkin);
		\$this->_db->setQuery(\$query);

		try
		{
			\$this->_db->execute();
		}
		catch (RuntimeException \$e)
		{
			\$this->setError(\$e->getMessage());

			return false;
		}

		// If checkin is supported and all rows were adjusted, check them in.
		if (\$checkin && (count(\$pks) == \$this->_db->getAffectedRows()))
		{
			// Checkin the rows.
			foreach (\$pks as \$pk)
			{
				\$this->checkin(\$pk);
			}
		}

		// If the JTable instance value is in the list of primary keys that were set, set the instance.
		if (in_array(\$this->\$k, \$pks))
		{
			\$this->state = \$state;
		}

		\$this->setError('');

		return true;
	}
}]]></content>
	<tabTrigger>joomla-admin-table</tabTrigger>
	<scope>source.php</scope>
</snippet>
